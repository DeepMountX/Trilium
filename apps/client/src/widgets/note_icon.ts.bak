import { t } from "../services/i18n.js";
import NoteContextAwareWidget from "./note_context_aware_widget.js";
import attributeService from "../services/attributes.js";
import server from "../services/server.js";
import type FNote from "../entities/fnote.js";
import type { EventData } from "../components/app_context.js";
import type { Icon } from "./icon_list.js";
import { Dropdown } from "bootstrap";

export default class NoteIconWidget extends NoteContextAwareWidget {

    private dropdown!: bootstrap.Dropdown;
    private $icon!: JQuery<HTMLElement>;
    private $iconList!: JQuery<HTMLElement>;
    private $iconCategory!: JQuery<HTMLElement>;
    private $iconSearch!: JQuery<HTMLElement>;

    doRender() {
        this.$icon = this.$widget.find("button.note-icon");
        this.$iconList = this.$widget.find(".icon-list");
    }

    async entitiesReloadedEvent({ loadResults }: EventData<"entitiesReloaded">) {
        if (this.noteId && loadResults.isNoteReloaded(this.noteId)) {
            this.refresh();
            return;
        }

        for (const attr of loadResults.getAttributeRows()) {
            if (attr.type === "label" && ["iconClass", "workspaceIconClass"].includes(attr.name ?? "") && attributeService.isAffecting(attr, this.note)) {
                this.refresh();
                break;
            }
        }
    }

    async renderDropdown() {
        this.$iconList.empty();

        if (this.getIconLabels().length > 0) {
            this.$iconList.append(
                $(`<div style="text-align: center">`).append(
                    $(`<button class="btn btn-sm">${t("note_icon.reset-default")}</button>`).on("click", () =>
                        this.getIconLabels().forEach((label) => {
                            if (this.noteId) {
                                attributeService.removeAttributeById(this.noteId, label.attributeId);
                            }
                        })
                    )
                )
            );
        }


        this.$iconSearch.focus();
    }

    getIconLabels() {
        if (!this.note) {
            return [];
        }
        return this.note.getOwnedLabels().filter((label) => ["workspaceIconClass", "iconClass"].includes(label.name));
    }
}
